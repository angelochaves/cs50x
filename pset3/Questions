f# Questions

## What's `stdint.h`?

It is a header file in C language that allows us to work with fixed width integer types.

## What's the point of using `uint8_t`, `uint32_t`, `int32_t`, and `uint16_t` in a program?

Portability. Different architectures set differente sizes to unsigned int and similar types. To avoid this kind of problem, data types such as uint64_t, for example, comes in handy since it has always the same size, no matter the architecture.

## How many bytes is a `BYTE`, a `DWORD`, a `LONG`, and a `WORD`, respectively?

BYTE - unsigned char (8 bits = 1 byte)
DWORD - unsigned integer (32 bits = 4 bytes)
LONG - signed integer (32 bits = 4 bytes)
WORD - unsigned integer (16 bits = 2 bytes)

## What (in ASCII, decimal, or hexadecimal) must the first two bytes of any BMP file be? Leading bytes used to identify file formats (with high probability) are generally called "magic numbers."

ASCII - 'BM'
Decimal - 66 77
Hexadecimal - 0x42 0x4D

## What's the difference between `bfSize` and `biSize`?

biSize considers the number of bytes of the structure of the image.
bfSize is the sum of the biSize and the sizes of BITMAPFILEHEADER and BITMAPINFOHEADER.

## What does it mean if `biHeight` is negative?

If biHeight is negative, the bitmap is a top-down DIB (device independent bitmap) and its origin is the upper-left corner.

## What field in `BITMAPINFOHEADER` specifies the BMP's color depth (i.e., bits per pixel)?

biBitCount. Typical values are 0, 1, 4, 8, 16, 24 and 32.

## Why might `fopen` return `NULL` in `copy.c`?

It will return 'NULL' if the first argument refers to an inexistent file.

## Why is the third argument to `fread` always `1` in our code?

Because it represents how many times the memory size pointed by &bf and &bi (in this case) will be read.
According to fread's syntax: fread (void *ptr, size, count, input file *ptr).

## What value does `copy.c` assign to `padding` if `bi.biWidth` is `3`?

 padding = (4 - (bi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4
 padding = (4 - (3 * 3) % 4) % 4
 padding = (4 - 9 % 4) % 4
 padding = (4 - 1) % 4
 padding = 3 % 4
 padding = 3

## What does `fseek` do?

fseek() function is a file handling function in C programming language. It specifies the position in the file for the next read or write operation and has the following constants: SEEK_SET, SEEK_CUR, SEEK_END.

Declaration syntax is as follows: int fseek(FILE *fp, long int offset, int whence), where: fp – file pointer; offset – Number of bytes/characters to be offset/moved from whence/the current file pointer position; whence – This is the current file pointer position from where offset is added.

## What is `SEEK_CUR`?

SEEK_CUR – It is a constant, used with fseek function, that moves file pointer position to given location. In copy.c, it was coded in line 82 to skip over eventual padding in the original image bits while copying it to the destination image.
